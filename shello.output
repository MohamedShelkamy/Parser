Terminals unused in grammar

    SUB


Grammar

    0 $accept: prog $end

    1 prog: prog_lines

    2 prog_lines: ε
    3           | prog_line TOK_SEMICOLON prog_lines

    4 prog_line: ε
    5          | assignment
    6          | dim
    7          | print

    8 assignment: LET TOK_IDENT EQ expr
    9           | LET TOK_IDENT LBRACKET expr RBRACKET EQ expr

   10 dim: DIM TOK_IDENT LBRACKET expr RBRACKET

   11 print: PRINT LPAREN expr RPAREN
   12      | PRINT LPAREN STRING RPAREN

   13 expr: TOK_NUM
   14     | TOK_IDENT LBRACKET expr RBRACKET
   15     | TOK_IDENT
   16     | expr PLUS expr
   17     | expr DIV expr
   18     | expr MUL expr
   19     | LPAREN expr RPAREN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    LET (258) 8 9
    EQ (259) 8 9
    PLUS (260) 16
    DIV (261) 17
    MUL (262) 18
    SUB (263)
    LPAREN (264) 11 12 19
    RPAREN (265) 11 12 19
    LBRACKET (266) 9 10 14
    RBRACKET (267) 9 10 14
    DIM (268) 10
    PRINT (269) 11 12
    TOK_SEMICOLON (270) 3
    TOK_NUM <int_val> (271) 13
    STRING <name> (272) 12
    TOK_IDENT <name> (273) 8 9 10 14 15


Nonterminals, with rules where they appear

    $accept (19)
        on left: 0
    prog (20)
        on left: 1
        on right: 0
    prog_lines (21)
        on left: 2 3
        on right: 1 3
    prog_line (22)
        on left: 4 5 6 7
        on right: 3
    assignment (23)
        on left: 8 9
        on right: 5
    dim (24)
        on left: 10
        on right: 6
    print (25)
        on left: 11 12
        on right: 7
    expr <int_val> (26)
        on left: 13 14 15 16 17 18 19
        on right: 8 9 10 11 14 16 17 18 19


State 0

    0 $accept: • prog $end

    LET    shift, and go to state 1
    DIM    shift, and go to state 2
    PRINT  shift, and go to state 3

    TOK_SEMICOLON  reduce using rule 4 (prog_line)
    $default       reduce using rule 2 (prog_lines)

    prog        go to state 4
    prog_lines  go to state 5
    prog_line   go to state 6
    assignment  go to state 7
    dim         go to state 8
    print       go to state 9


State 1

    8 assignment: LET • TOK_IDENT EQ expr
    9           | LET • TOK_IDENT LBRACKET expr RBRACKET EQ expr

    TOK_IDENT  shift, and go to state 10


State 2

   10 dim: DIM • TOK_IDENT LBRACKET expr RBRACKET

    TOK_IDENT  shift, and go to state 11


State 3

   11 print: PRINT • LPAREN expr RPAREN
   12      | PRINT • LPAREN STRING RPAREN

    LPAREN  shift, and go to state 12


State 4

    0 $accept: prog • $end

    $end  shift, and go to state 13


State 5

    1 prog: prog_lines •

    $default  reduce using rule 1 (prog)


State 6

    3 prog_lines: prog_line • TOK_SEMICOLON prog_lines

    TOK_SEMICOLON  shift, and go to state 14


State 7

    5 prog_line: assignment •

    $default  reduce using rule 5 (prog_line)


State 8

    6 prog_line: dim •

    $default  reduce using rule 6 (prog_line)


State 9

    7 prog_line: print •

    $default  reduce using rule 7 (prog_line)


State 10

    8 assignment: LET TOK_IDENT • EQ expr
    9           | LET TOK_IDENT • LBRACKET expr RBRACKET EQ expr

    EQ        shift, and go to state 15
    LBRACKET  shift, and go to state 16


State 11

   10 dim: DIM TOK_IDENT • LBRACKET expr RBRACKET

    LBRACKET  shift, and go to state 17


State 12

   11 print: PRINT LPAREN • expr RPAREN
   12      | PRINT LPAREN • STRING RPAREN

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    STRING     shift, and go to state 20
    TOK_IDENT  shift, and go to state 21

    expr  go to state 22


State 13

    0 $accept: prog $end •

    $default  accept


State 14

    3 prog_lines: prog_line TOK_SEMICOLON • prog_lines

    LET    shift, and go to state 1
    DIM    shift, and go to state 2
    PRINT  shift, and go to state 3

    TOK_SEMICOLON  reduce using rule 4 (prog_line)
    $default       reduce using rule 2 (prog_lines)

    prog_lines  go to state 23
    prog_line   go to state 6
    assignment  go to state 7
    dim         go to state 8
    print       go to state 9


State 15

    8 assignment: LET TOK_IDENT EQ • expr

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 24


State 16

    9 assignment: LET TOK_IDENT LBRACKET • expr RBRACKET EQ expr

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 25


State 17

   10 dim: DIM TOK_IDENT LBRACKET • expr RBRACKET

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 26


State 18

   19 expr: LPAREN • expr RPAREN

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 27


State 19

   13 expr: TOK_NUM •

    $default  reduce using rule 13 (expr)


State 20

   12 print: PRINT LPAREN STRING • RPAREN

    RPAREN  shift, and go to state 28


State 21

   14 expr: TOK_IDENT • LBRACKET expr RBRACKET
   15     | TOK_IDENT •

    LBRACKET  shift, and go to state 29

    $default  reduce using rule 15 (expr)


State 22

   11 print: PRINT LPAREN expr • RPAREN
   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr

    PLUS    shift, and go to state 30
    DIV     shift, and go to state 31
    MUL     shift, and go to state 32
    RPAREN  shift, and go to state 33


State 23

    3 prog_lines: prog_line TOK_SEMICOLON prog_lines •

    $default  reduce using rule 3 (prog_lines)


State 24

    8 assignment: LET TOK_IDENT EQ expr •
   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr

    PLUS  shift, and go to state 30
    DIV   shift, and go to state 31
    MUL   shift, and go to state 32

    $default  reduce using rule 8 (assignment)


State 25

    9 assignment: LET TOK_IDENT LBRACKET expr • RBRACKET EQ expr
   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr

    PLUS      shift, and go to state 30
    DIV       shift, and go to state 31
    MUL       shift, and go to state 32
    RBRACKET  shift, and go to state 34


State 26

   10 dim: DIM TOK_IDENT LBRACKET expr • RBRACKET
   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr

    PLUS      shift, and go to state 30
    DIV       shift, and go to state 31
    MUL       shift, and go to state 32
    RBRACKET  shift, and go to state 35


State 27

   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr
   19     | LPAREN expr • RPAREN

    PLUS    shift, and go to state 30
    DIV     shift, and go to state 31
    MUL     shift, and go to state 32
    RPAREN  shift, and go to state 36


State 28

   12 print: PRINT LPAREN STRING RPAREN •

    $default  reduce using rule 12 (print)


State 29

   14 expr: TOK_IDENT LBRACKET • expr RBRACKET

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 37


State 30

   16 expr: expr PLUS • expr

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 38


State 31

   17 expr: expr DIV • expr

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 39


State 32

   18 expr: expr MUL • expr

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 40


State 33

   11 print: PRINT LPAREN expr RPAREN •

    $default  reduce using rule 11 (print)


State 34

    9 assignment: LET TOK_IDENT LBRACKET expr RBRACKET • EQ expr

    EQ  shift, and go to state 41


State 35

   10 dim: DIM TOK_IDENT LBRACKET expr RBRACKET •

    $default  reduce using rule 10 (dim)


State 36

   19 expr: LPAREN expr RPAREN •

    $default  reduce using rule 19 (expr)


State 37

   14 expr: TOK_IDENT LBRACKET expr • RBRACKET
   16     | expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr

    PLUS      shift, and go to state 30
    DIV       shift, and go to state 31
    MUL       shift, and go to state 32
    RBRACKET  shift, and go to state 42


State 38

   16 expr: expr • PLUS expr
   16     | expr PLUS expr •
   17     | expr • DIV expr
   18     | expr • MUL expr

    DIV  shift, and go to state 31
    MUL  shift, and go to state 32

    $default  reduce using rule 16 (expr)


State 39

   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   17     | expr DIV expr •
   18     | expr • MUL expr

    $default  reduce using rule 17 (expr)


State 40

   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr
   18     | expr MUL expr •

    $default  reduce using rule 18 (expr)


State 41

    9 assignment: LET TOK_IDENT LBRACKET expr RBRACKET EQ • expr

    LPAREN     shift, and go to state 18
    TOK_NUM    shift, and go to state 19
    TOK_IDENT  shift, and go to state 21

    expr  go to state 43


State 42

   14 expr: TOK_IDENT LBRACKET expr RBRACKET •

    $default  reduce using rule 14 (expr)


State 43

    9 assignment: LET TOK_IDENT LBRACKET expr RBRACKET EQ expr •
   16 expr: expr • PLUS expr
   17     | expr • DIV expr
   18     | expr • MUL expr

    PLUS  shift, and go to state 30
    DIV   shift, and go to state 31
    MUL   shift, and go to state 32

    $default  reduce using rule 9 (assignment)
